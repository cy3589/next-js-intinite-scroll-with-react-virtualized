import type {
  //  GetServerSideProps,
  NextPage,
} from 'next';
import Head from 'next/head';
import {
  //  QueryClient,
  useInfiniteQuery,
} from 'react-query';
// import { dehydrate } from 'react-query/hydration';
import axios from 'axios';
import {
  InfiniteLoader,
  AutoSizer,
  List,
  // OnScrollParams,
  WindowScroller,
  // ScrollParams,
  CellMeasurer,
  CellMeasurerCache,
} from 'react-virtualized';
import React, { CSSProperties, useRef } from 'react';
import Image from 'next/image';

const Row = React.memo(
  ({
    index,
    style,
    arr,
  }: {
    index: number;
    style: CSSProperties;
    arr: Array<any> | undefined;
  }) => {
    if (arr?.length === 0 || !arr || !arr[index]) return null;
    const data = arr[index];
    return (
      <div key={index} style={style}>
        <div>{index}번째 포켓몬</div>
        <div>{data.name}</div>
        <Image src={data.url} alt={data.url} height={100} width={100} />
      </div>
    );
  },
);
Row.displayName = 'Row';

const getPokes = async ({ pageParam = 0 }) => {
  const { data: dataArr } = await axios.get(
    `https://pokeapi.co/api/v2/pokemon?limit=20&offset=${pageParam}`,
  );
  const newResults = await Promise.all(
    dataArr.results.map(
      async ({ name, url }: { name: string; url: string }) => {
        const { data: detail } = await axios.get(url);
        return { name, url: detail.sprites.front_default };
      },
    ),
  );
  return { ...dataArr, results: newResults };
};

const Home: NextPage = () => {
  const cache = useRef(
    new CellMeasurerCache({
      fixedWidth: true,
      defaultHeight: 142.66,
    }),
  );
  const { data, fetchNextPage } = useInfiniteQuery('poke', getPokes, {
    getNextPageParam: (lastPage) => {
      return new URLSearchParams(
        lastPage.next.split('?')[lastPage.next.split('?').length - 1],
      ).get('offset');
    },
  });
  const render = data?.pages.flatMap(({ results }) => results);
  if (typeof window === 'undefined') return null;
  return (
    <div>
      <Head>
        <title>Infinite Scroll with React-Query</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      {typeof window !== 'undefined' && (
        <InfiniteLoader
          isRowLoaded={({ index }) => (render ? index < render?.length : true)}
          rowCount={Infinity}
          loadMoreRows={async () => {
            if (data && Array.isArray(data?.pages))
              await fetchNextPage(data.pages[data.pages.length - 1]);
          }}
        >
          {({ onRowsRendered, registerChild }) => (
            <WindowScroller>
              {/* {({ isScrolling, height, scrollTop, width }) => { */}
              {({ isScrolling, height, scrollTop }) => {
                // console.log(height);
                return (
                  <AutoSizer disableHeight>
                    {({ width }) => (
                      <List
                        onRowsRendered={onRowsRendered}
                        ref={registerChild}
                        height={height}
                        autoHeight
                        width={width}
                        rowHeight={cache.current.rowHeight}
                        rowCount={render?.length || 10}
                        // onScroll={handleScroll}
                        overscanRowCount={4}
                        scrollTop={scrollTop}
                        isScrolling={isScrolling}
                        // eslint-disable-next-line react/no-unstable-nested-components
                        rowRenderer={({ key, index, style, parent }) => (
                          <CellMeasurer
                            key={key}
                            cache={cache.current}
                            parent={parent}
                            columnIndex={0}
                            rowIndex={index}
                          >
                            <Row index={index} style={style} arr={render} />
                          </CellMeasurer>
                        )}
                      />
                    )}
                  </AutoSizer>
                );
              }}
            </WindowScroller>
          )}
        </InfiniteLoader>
      )}
    </div>
  );
};
export default React.memo(Home);

// export default Home;
// export const getServerSideProps: GetServerSideProps = async () => {
//   const queryClient = new QueryClient();
//   await queryClient.prefetchInfiniteQuery('poke', getPokes);
//   return {
//     props: {
//       dehydratedState: JSON.parse(JSON.stringify(dehydrate(queryClient))),
//     },
//   };
// };
